xml
<ArchitectureSpec version="1.0">
  <Context>
    <AppName>Training Management System</AppName>
    <BusinessCapabilities>Course Management, Student Management, Enrollment Management, Instructor Management, Reporting and Analytics, Authentication and Authorization</BusinessCapabilities>
    <Criticality>high</Criticality>
  </Context>

  <Decisions>
    <DomainStyle>modular monolith</DomainStyle>
    <IntegrationStyle>event-driven with REST APIs</IntegrationStyle>
    <Runtime>python</Runtime>
    <DataTier>aurora serverless v2 for relational, dynamodb for high-write operations, s3 for events and logs</DataTier>
    <InfraBaseline>serverless</InfraBaseline>
  </Decisions>

  <Patterns>
    <Pattern name="API Gateway Facade" rationale="Centralized REST API management with routing, authentication, rate limiting, and backward compatibility for existing clients"/>
    <Pattern name="Domain-Driven Service Decomposition" rationale="Logical separation of course, student, enrollment, and instructor domains within modular structure while maintaining transactional consistency"/>
    <Pattern name="Event-Driven Integration" rationale="Asynchronous communication between domains via EventBridge for enrollment events, course updates, and audit logging"/>
    <Pattern name="CQRS for Reporting" rationale="Separate read models in DynamoDB for high-performance reporting and analytics queries while maintaining source of truth in Aurora"/>
    <Pattern name="Strangler Fig Migration" rationale="Gradual migration from monolith with API gateway routing to new services while maintaining backward compatibility"/>
    <Pattern name="Database per Domain" rationale="Aurora for transactional course/student/enrollment data, DynamoDB for session state and high-write audit logs"/>
    <Pattern name="Circuit Breaker" rationale="Resilience pattern for external dependencies and inter-service calls to prevent cascading failures"/>
    <Pattern name="Saga Pattern" rationale="Distributed transaction management for enrollment workflows spanning student, course, and enrollment domains"/>
    <Pattern name="Outbox Pattern" rationale="Reliable event publishing from Aurora to EventBridge ensuring transactional consistency"/>
    <Pattern name="API Versioning" rationale="URL-based versioning strategy to maintain backward compatibility while enabling future API evolution"/>
  </Patterns>

  <NonFunctionals>
    <Availability target="99.5%"/>
    <Latency p95_ms="500"/>
    <Throughput rps="1000"/>
    <Security notes="Encryption at rest via KMS, in transit via TLS 1.2+. PII protection for student data per FERPA. IAM least privilege. Secrets Manager for credentials. MFA for production access. Audit logging to S3 with 7-year retention."/>
    <Compliance notes="FERPA compliance for student PII. Audit trails for all data access and modifications. Quarterly access reviews. Data residency in single AWS region."/>
    <Observability notes="CloudWatch Logs with structured JSON logging. OpenTelemetry traces for distributed requests. Custom metrics for business KPIs. CloudWatch dashboards for service health. Alarms for SLA breaches with SNS notifications."/>
    <CostGuardrails notes="Serverless-first to minimize idle costs. Aurora Serverless v2 auto-scaling with min/max ACU limits. DynamoDB on-demand pricing. Lambda concurrency limits. Monthly budget alerts at 80% and 100% thresholds. Cost allocation tags per service."/>
  </NonFunctionals>

  <Services>
    <Service name="CourseService" domain="course-management">
      <APIs>
        <API name="CourseAPI" protocol="REST" auth="JWT via API Gateway authorizer" sync_or_async="sync"/>
        <API name="CourseEventsPublisher" protocol="EventBridge" auth="IAM" sync_or_async="async"/>
      </APIs>
      <DataStores>
        <Store type="Aurora Serverless v2 PostgreSQL" purpose="Course catalog, course attributes, instructor assignments, transactional data"/>
        <Store type="DynamoDB" purpose="Course search index and read model for high-performance queries"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="topic" name="course-events" purpose="Publish course creation, updates, deletions for downstream consumers"/>
      </QueuesTopics>
    </Service>

    <Service name="StudentService" domain="student-management">
      <APIs>
        <API name="StudentAPI" protocol="REST" auth="JWT via API Gateway authorizer" sync_or_async="sync"/>
        <API name="StudentEventsPublisher" protocol="EventBridge" auth="IAM" sync_or_async="async"/>
      </APIs>
      <DataStores>
        <Store type="Aurora Serverless v2 PostgreSQL" purpose="Student profiles, PII data, enrollment history, academic records"/>
        <Store type="DynamoDB" purpose="Student search index and session state"/>
        <Store type="S3" purpose="Encrypted audit logs for PII access"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="topic" name="student-events" purpose="Publish student registration, profile updates for audit and analytics"/>
      </QueuesTopics>
    </Service>

    <Service name="EnrollmentService" domain="enrollment-management">
      <APIs>
        <API name="EnrollmentAPI" protocol="REST" auth="JWT via API Gateway authorizer" sync_or_async="sync"/>
        <API name="EnrollmentEventsPublisher" protocol="EventBridge" auth="IAM" sync_or_async="async"/>
      </APIs>
      <DataStores>
        <Store type="Aurora Serverless v2 PostgreSQL" purpose="Enrollment records, status tracking, capacity management, prerequisites validation"/>
        <Store type="DynamoDB" purpose="High-write enrollment audit trail and real-time capacity counters"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="topic" name="enrollment-events" purpose="Publish enrollment, withdrawal, status changes"/>
        <Channel type="queue" name="enrollment-validation-queue" purpose="Asynchronous prerequisite and capacity validation"/>
      </QueuesTopics>
    </Service>

    <Service name="InstructorService" domain="instructor-management">
      <APIs>
        <API name="InstructorAPI" protocol="REST" auth="JWT via API Gateway authorizer" sync_or_async="sync"/>
        <API name="InstructorEventsPublisher" protocol="EventBridge" auth="IAM" sync_or_async="async"/>
      </APIs>
      <DataStores>
        <Store type="Aurora Serverless v2 PostgreSQL" purpose="Instructor profiles, course assignments, teaching history"/>
        <Store type="DynamoDB" purpose="Instructor search index"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="topic" name="instructor-events" purpose="Publish instructor assignments and profile updates"/>
      </QueuesTopics>
    </Service>

    <Service name="ReportingService" domain="reporting-analytics">
      <APIs>
        <API name="ReportingAPI" protocol="REST" auth="JWT via API Gateway authorizer" sync_or_async="sync"/>
      </APIs>
      <DataStores>
        <Store type="DynamoDB" purpose="Materialized views for enrollment reports, course analytics, student metrics"/>
        <Store type="S3" purpose="Generated report artifacts and historical data lake"/>
        <Store type="Aurora Serverless v2 PostgreSQL" purpose="Ad-hoc query access to source data"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="queue" name="report-generation-queue" purpose="Asynchronous report generation jobs"/>
      </QueuesTopics>
    </Service>

    <Service name="AuthenticationService" domain="identity-access">
      <APIs>
        <API name="AuthAPI" protocol="REST" auth="API Key for token exchange" sync_or_async="sync"/>
      </APIs>
      <DataStores>
        <Store type="DynamoDB" purpose="User sessions, refresh tokens, MFA state"/>
        <Store type="Aurora Serverless v2 PostgreSQL" purpose="User accounts, roles, permissions"/>
        <Store type="Secrets Manager" purpose="Credential storage"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="topic" name="auth-events" purpose="Publish authentication events for audit logging"/>
      </QueuesTopics>
    </Service>

    <Service name="ConfigurationService" domain="platform">
      <APIs>
        <API name="ConfigAPI" protocol="REST" auth="IAM" sync_or_async="sync"/>
      </APIs>
      <DataStores>
        <Store type="DynamoDB" purpose="Application configuration parameters, feature flags, environment-specific settings"/>
        <Store type="Secrets Manager" purpose="Sensitive configuration values"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="topic" name="config-change-events" purpose="Notify services of configuration updates"/>
      </QueuesTopics>
    </Service>

    <Service name="EventProcessorService" domain="platform">
      <APIs>
        <API name="EventSubscriber" protocol="EventBridge" auth="IAM" sync_or_async="async"/>
      </APIs>
      <DataStores>
        <Store type="S3" purpose="Event archive for audit and replay"/>
        <Store type="DynamoDB" purpose="Event processing state and idempotency tracking"/>
      </DataStores>
      <QueuesTopics>
        <Channel type="queue" name="dead-letter-queue" purpose="Failed event processing for manual intervention"/>
      </QueuesTopics>
    </Service>
  </Services>

  <Constraints>
    <Must>Maintain 100% data integrity during migration with zero data loss. Encrypt all data at rest and in transit. Maintain backward compatibility for all existing REST APIs. Achieve 99.5% availability SLA. Meet p95 latency under 500ms. Implement 80% minimum code coverage. Enable audit logging for all data access. Follow principle of least privilege for IAM. Implement MFA for production access. Maintain RTO of 4 hours and RPO of 1 hour. Comply with FERPA for student PII.</Must>
    <Should>Implement auto-scaling with cost limits. Use serverless-first approach to minimize idle costs. Implement circuit breakers for resilience. Use infrastructure as code via Terraform. Implement health checks and readiness probes. Create comprehensive documentation and runbooks. Conduct quarterly DR testing. Implement self-service analytics capabilities.</Should>
    <MustNot>Store sensitive data in code repositories. Store credentials or API keys in configuration files. Deploy to production without security scanning. Exceed approved cloud budget without explicit approval. Allow breaking API changes without coordinated migration plan. Deploy without automated testing validation. Grant production access without MFA.</MustNot>
  </Constraints>

  <CloudMapping provider="AWS">
    <Compute>Lambda functions (Python 3.11 runtime) for all service logic. Lambda concurrency limits per service. Lambda layers for shared dependencies and OpenTelemetry instrumentation. Step Functions for enrollment saga orchestration.</Compute>
    <Networking>API Gateway REST APIs with custom domain. VPC for Aurora Serverless v2 with private subnets. VPC endpoints for DynamoDB, S3, Secrets Manager. Security groups restricting Lambda to Aurora access. WAF on API Gateway for DDoS protection.</Networking>
    <Data>Aurora Serverless v2 PostgreSQL cluster with auto-scaling (min 0.5 ACU, max 16 ACU). DynamoDB tables with on-demand billing and point-in-time recovery. S3 buckets with versioning, encryption via KMS, lifecycle policies for cost optimization. RDS Proxy for connection pooling to Aurora.</Data>
    <Messaging>EventBridge event bus for domain events. SQS standard queues for work distribution. SQS FIFO queues for enrollment ordering. Dead-letter queues for failed processing. SNS topics for operational alerts.</Messaging>
    <Identity>IAM roles and policies for service-to-service authentication. Cognito User Pool for user authentication with MFA. API Gateway Lambda authorizers for JWT validation. Secrets Manager for credential rotation. KMS customer-managed keys for encryption.</Identity>
  </CloudMapping>

  <Risks>
    <Risk item="Java to Python migration requires complete application rewrite" mitigation="Phased migration approach with API Gateway routing traffic between legacy Java monolith and new Python services. Comprehensive integration testing. Parallel run period for validation."/>
    <Risk item="Aurora Serverless v2 cold start latency may impact p95 targets" mitigation="Set minimum ACU to 0.5 to reduce cold starts. Implement RDS Proxy for connection pooling. Monitor cold start metrics and adjust scaling parameters."/>
    <Risk item="DynamoDB eventual consistency may cause read-after-write issues" mitigation="Use strongly consistent reads for critical operations. Implement optimistic locking with version attributes. Design UI to handle eventual consistency gracefully."/>
    <Risk item="Distributed transactions across services increase complexity" mitigation="Implement saga pattern with compensating transactions. Use outbox pattern for reliable event publishing. Comprehensive integration testing of failure scenarios."/>
    <Risk item="Lambda concurrent execution limits may throttle during peak enrollment" mitigation="Request service quota increases for Lambda concurrency. Implement SQS buffering for enrollment requests. Load testing to validate scaling behavior."/>
    <Risk item="API Gateway backward compatibility constraint limits modernization" mitigation="Implement API versioning strategy. Use API Gateway request/response transformations. Plan coordinated migration with API consumers for v2 endpoints."/>
    <Risk item="Cost overruns from unoptimized serverless usage" mitigation="Implement CloudWatch billing alarms at 80% and 100% budget thresholds. Regular cost optimization reviews. Lambda memory and timeout tuning. DynamoDB capacity planning."/>
    <Risk item="FERPA compliance for student PII in distributed system" mitigation="Encrypt PII fields at application layer. Implement field-level access controls. Comprehensive audit logging to S3 with 7-year retention. Regular compliance audits."/>
    <Risk item="Data migration from Java monolith database schema to new structure" mitigation="Develop and test migration scripts in non-production environments. Implement automated data reconciliation. Plan for rollback capability. Execute migration during low-usage window."/>
    <Risk item="Lack of Python expertise in existing Java development team" mitigation="Provide Python training for development team. Hire Python-experienced developers. Establish code review standards. Create Python coding guidelines and best practices documentation."/>
  </Risks>
</ArchitectureSpec>
