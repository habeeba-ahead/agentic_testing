```json
{
  "tooling": "terraform",
  "patterns": [
    {
      "path": "modules/s3_bucket/main.tf",
      "content": "# S3 Bucket Module - Secure by Default\n# Supports versioning, encryption, lifecycle policies, and public access blocking\n\nresource \"aws_s3_bucket\" \"this\" {\n  bucket        = var.bucket_name\n  force_destroy = var.force_destroy\n  tags          = var.tags\n}\n\nresource \"aws_s3_bucket_versioning\" \"this\" {\n  count  = var.enable_versioning ? 1 : 0\n  bucket = aws_s3_bucket.this.id\n\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"this\" {\n  bucket = aws_s3_bucket.this.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      sse_algorithm     = var.kms_key_id != null ? \"aws:kms\" : \"AES256\"\n      kms_master_key_id = var.kms_key_id\n    }\n    bucket_key_enabled = var.kms_key_id != null ? true : false\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"this\" {\n  bucket = aws_s3_bucket.this.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_s3_bucket_policy\" \"this\" {\n  bucket = aws_s3_bucket.this.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Sid    = \"EnforceTLSOnly\"\n        Effect = \"Deny\"\n        Principal = \"*\"\n        Action = \"s3:*\"\n        Resource = [\n          aws_s3_bucket.this.arn,\n          \"${aws_s3_bucket.this.arn}/*\"\n        ]\n        Condition = {\n          Bool = {\n            \"aws:SecureTransport\" = \"false\"\n          }\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_s3_bucket_lifecycle_configuration\" \"this\" {\n  count  = var.enable_lifecycle ? 1 : 0\n  bucket = aws_s3_bucket.this.id\n\n  rule {\n    id     = \"intelligent-tiering\"\n    status = \"Enabled\"\n\n    transition {\n      days          = var.transition_to_ia_days\n      storage_class = \"STANDARD_IA\"\n    }\n\n    transition {\n      days          = var.transition_to_glacier_days\n      storage_class = \"GLACIER\"\n    }\n\n    expiration {\n      days = var.expiration_days\n    }\n\n    noncurrent_version_expiration {\n      noncurrent_days = var.noncurrent_version_expiration_days\n    }\n  }\n}\n\nresource \"aws_s3_bucket_logging\" \"this\" {\n  count  = var.logging_bucket != null ? 1 : 0\n  bucket = aws_s3_bucket.this.id\n\n  target_bucket = var.logging_bucket\n  target_prefix = var.logging_prefix\n}\n"
    },
    {
      "path": "modules/s3_bucket/variables.tf",
      "content": "variable \"bucket_name\" {\n  description = \"Name of the S3 bucket\"\n  type        = string\n}\n\nvariable \"force_destroy\" {\n  description = \"Allow bucket to be destroyed even if it contains objects\"\n  type        = bool\n  default     = false\n}\n\nvariable \"enable_versioning\" {\n  description = \"Enable versioning for the bucket\"\n  type        = bool\n  default     = true\n}\n\nvariable \"kms_key_id\" {\n  description = \"KMS key ID for encryption (null for AES256)\"\n  type        = string\n  default     = null\n}\n\nvariable \"enable_lifecycle\" {\n  description = \"Enable lifecycle policies\"\n  type        = bool\n  default     = true\n}\n\nvariable \"transition_to_ia_days\" {\n  description = \"Days before transitioning to STANDARD_IA\"\n  type        = number\n  default     = 90\n}\n\nvariable \"transition_to_glacier_days\" {\n  description = \"Days before transitioning to GLACIER\"\n  type        = number\n  default     = 180\n}\n\nvariable \"expiration_days\" {\n  description = \"Days before object expiration\"\n  type        = number\n  default     = 365\n}\n\nvariable \"noncurrent_version_expiration_days\" {\n  description = \"Days before noncurrent version expiration\"\n  type        = number\n  default     = 90\n}\n\nvariable \"logging_bucket\" {\n  description = \"Target bucket for access logs\"\n  type        = string\n  default     = null\n}\n\nvariable \"logging_prefix\" {\n  description = \"Prefix for access logs\"\n  type        = string\n  default     = \"logs/\"\n}\n\nvariable \"tags\" {\n  description = \"Tags to apply to the bucket\"\n  type        = map(string)\n  default     = {}\n}\n"
    },
    {
      "path": "modules/s3_bucket/outputs.tf",
      "content": "output \"bucket_id\" {\n  description = \"ID of the S3 bucket\"\n  value       = aws_s3_bucket.this.id\n}\n\noutput \"bucket_arn\" {\n  description = \"ARN of the S3 bucket\"\n  value       = aws_s3_bucket.this.arn\n}\n\noutput \"bucket_domain_name\" {\n  description = \"Domain name of the S3 bucket\"\n  value       = aws_s3_bucket.this.bucket_domain_name\n}\n\noutput \"bucket_regional_domain_name\" {\n  description = \"Regional domain name of the S3 bucket\"\n  value       = aws_s3_bucket.this.bucket_regional_domain_name\n}\n"
    },
    {
      "path": "modules/s3_bucket/README.md",
      "content": "# S3 Bucket Module\n\n## Overview\nSecure-by-default S3 bucket module with encryption, versioning, lifecycle policies, and public access blocking.\n\n## Features\n- **Encryption**: KMS or AES256 encryption at rest\n- **Versioning**: Optional versioning for data protection\n- **Lifecycle**: Intelligent-Tiering with transitions to IA and Glacier\n- **Security**: Public access blocked, TLS-only policy enforced\n- **Logging**: Optional access logging to another bucket\n\n## Usage\n```hcl\nmodule \"app_bucket\" {\n  source = \"./modules/s3_bucket\"\n\n  bucket_name        = \"my-app-data-bucket\"\n  enable_versioning  = true\n  kms_key_id         = aws_kms_key.app.id\n  enable_lifecycle   = true\n  logging_bucket     = module.logging_bucket.bucket_id\n\n  tags = {\n    Environment = \"production\"\n    Application = \"core-app\"\n    CostCenter  = \"engineering\"\n  }\n}\n```\n\n## Inputs\n| Name | Description | Type | Default | Required |\n|------|-------------|------|---------|----------|\n| bucket_name | Name of the S3 bucket | string | - | yes |\n| force_destroy | Allow bucket destruction with objects | bool | false | no |\n| enable_versioning | Enable versioning | bool | true | no |\n| kms_key_id | KMS key ID for encryption | string | null | no |\n| enable_lifecycle | Enable lifecycle policies | bool | true | no |\n| transition_to_ia_days | Days to STANDARD_IA | number | 90 | no |\n| transition_to_glacier_days | Days to GLACIER | number | 180 | no |\n| expiration_days | Days to expiration | number | 365 | no |\n| noncurrent_version_expiration_days | Days to noncurrent expiration | number | 90 | no |\n| logging_bucket | Target bucket for logs | string | null | no |\n| logging_prefix | Prefix for logs | string | \"logs/\" | no |\n| tags | Tags to apply | map(string) | {} | no |\n\n## Outputs\n| Name | Description |\n|------|-------------|\n| bucket_id | ID of the S3 bucket |\n| bucket_arn | ARN of the S3 bucket |\n| bucket_domain_name | Domain name of the bucket |\n| bucket_regional_domain_name | Regional domain name |\n\n## Security\n- Public access is blocked by default\n- TLS 1.2+ enforced via bucket policy\n- Encryption at rest with KMS or AES256\n- Versioning enabled for data protection\n\n## Compliance\n- MEC-aligned with encryption and access controls\n- CloudTrail logs all API calls\n- Lifecycle policies support retention requirements\n"
    },
    {
      "path": "modules/sqs_queue/main.tf",
      "content": "# SQS Queue Module - Standard and FIFO with DLQ\n# Supports encryption, message retention, and dead-letter queue configuration\n\nresource \"aws_sqs_queue\" \"this\" {\n  name                       = var.queue_name\n  fifo_queue                 = var.fifo_queue\n  content_based_deduplication = var.fifo_queue ? var.content_based_deduplication : null\n  visibility_timeout_seconds = var.visibility_timeout_seconds\n  message_retention_seconds  = var.message_retention_seconds\n  max_message_size           = var.max_message_size\n  delay_seconds              = var.delay_seconds\n  receive_wait_time_seconds  = var.receive_wait_time_seconds\n  kms_master_key_id          = var.kms_key_id\n  kms_data_key_reuse_period_seconds = var.kms_key_id != null ? 300 : null\n\n  redrive_policy = var.enable_dlq ? jsonencode({\n    deadLetterTargetArn = aws_sqs_queue.dlq[0].arn\n    maxReceiveCount     = var.max_receive_count\n  }) : null\n\n  tags = var.tags\n}\n\nresource \"aws_sqs_queue\" \"dlq\" {\n  count                     = var.enable_dlq ? 1 : 0\n  name                      = \"${var.queue_name}-dlq\"\n  fifo_queue                = var.fifo_queue\n  message_retention_seconds = var.dlq_message_retention_seconds\n  kms_master_key_id         = var.kms_key_id\n  kms_data_key_reuse_period_seconds = var.kms_key_id != null ? 300 : null\n\n  tags = merge(var.tags, {\n    Purpose = \"DeadLetterQueue\"\n  })\n}\n\nresource \"aws_sqs_queue_policy\" \"this\" {\n  count     = var.queue_policy != null ? 1 : 0\n  queue_url = aws_sqs_queue.this.id\n  policy    = var.queue_policy\n}\n\nresource \"aws_cloudwatch_metric_alarm\" \"dlq_messages\" {\n  count               = var.enable_dlq && var.enable_dlq_alarm ? 1 : 0\n  alarm_name          = \"${var.queue_name}-dlq-messages\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"ApproximateNumberOfMessagesVisible\"\n  namespace           = \"AWS/SQS\"\n  period              = 300\n  statistic           = \"Average\"\n  threshold           = var.dlq_alarm_threshold\n  alarm_description   = \"Alert when DLQ has messages\"\n  treat_missing_data  = \"notBreaching\"\n\n  dimensions = {\n    QueueName = aws_sqs_queue.dlq[0].name\n  }\n\n  alarm_actions = var.alarm_actions\n  tags          = var.tags\n}\n"
    },
    {
      "path": "modules/sqs_queue/variables.tf",
      "content": "variable \"queue_name\" {\n  description = \"Name of the SQS queue\"\n  type        = string\n}\n\nvariable \"fifo_queue\" {\n  description = \"Enable FIFO queue\"\n  type        = bool\n  default     = false\n}\n\nvariable \"content_based_deduplication\" {\n  description = \"Enable content-based deduplication for FIFO\"\n  type        = bool\n  default     = false\n}\n\nvariable \"visibility_timeout_seconds\" {\n  description = \"Visibility timeout in seconds\"\n  type        = number\n  default     = 30\n}\n\nvariable \"message_retention_seconds\" {\n  description = \"Message retention period in seconds\"\n  type        = number\n  default     = 345600\n}\n\nvariable \"max_message_size\" {\n  description = \"Maximum message size in bytes\"\n  type        = number\n  default     = 262144\n}\n\nvariable \"delay_seconds\" {\n  description = \"Delay before message is available\"\n  type        = number\n  default     = 0\n}\n\nvariable \"receive_wait_time_seconds\" {\n  description = \"Long polling wait time\"\n  type        = number\n  default     = 0\n}\n\nvariable \"kms_key_id\" {\n  description = \"KMS key ID for encryption\"\n  type        = string\n  default     = null\n}\n\nvariable \"enable_dlq\" {\n  description = \"Enable dead-letter queue\"\n  type        = bool\n  default     = true\n}\n\nvariable \"max_receive_count\" {\n  description = \"Max receives before moving to DLQ\"\n  type        = number\n  default     = 3\n}\n\nvariable \"dlq_message_retention_seconds\" {\n  description = \"DLQ message retention in seconds\"\n  type        = number\n  default     = 1209600\n}\n\nvariable \"queue_policy\" {\n  description = \"IAM policy document for queue\"\n  type        = string\n  default     = null\n}\n\nvariable \"enable_dlq_alarm\" {\n  description = \"Enable CloudWatch alarm for DLQ\"\n  type        = bool\n  default     = true\n}\n\nvariable \"dlq_alarm_threshold\" {\n  description = \"Threshold for DLQ alarm\"\n  type        = number\n  default     = 1\n}\n\nvariable \"alarm_actions\" {\n  description = \"SNS topic ARNs for alarms\"\n  type        = list(string)\n  default     = []\n}\n\nvariable \"tags\" {\n  description = \"Tags to apply to resources\"\n  type        = map(string)\n  default     = {}\n}\n"
    },
    {
      "path": "modules/sqs_queue/outputs.tf",
      "content": "output \"queue_id\" {\n  description = \"ID of the SQS queue\"\n  value       = aws_sqs_queue.this.id\n}\n\noutput \"queue_arn\" {\n  description = \"ARN of the SQS queue\"\n  value       = aws_sqs_queue.this.arn\n}\n\noutput \"queue_url\" {\n  description = \"URL of the SQS queue\"\n  value       = aws_sqs_queue.this.url\n}\n\noutput \"dlq_id\" {\n  description = \"ID of the DLQ\"\n  value       = var.enable_dlq ? aws_sqs_queue.dlq[0].id : null\n}\n\noutput \"dlq_arn\" {\n  description = \"ARN of the DLQ\"\n  value       = var.enable_dlq ? aws_sqs_queue.dlq[0].arn : null\n}\n\noutput \"dlq_url\" {\n  description = \"URL of the DLQ\"\n  value       = var.enable_dlq ? aws_sqs_queue.dlq[0].url : null\n}\n"
    },
    {
      "path": "modules/sqs_queue/README.md",
      "content": "# SQS Queue Module\n\n## Overview\nSQS queue module supporting standard and FIFO queues with dead-letter queue, encryption, and CloudWatch alarms.\n\n## Features\n- **Standard/FIFO**: Support for both queue types\n- **Encryption**: KMS encryption at rest\n- **DLQ**: Automatic dead-letter queue with configurable retry\n- **Alarms**: CloudWatch alarms for DLQ message count\n- **Long Polling**: Configurable receive wait time\n\n## Usage\n```hcl\nmodule \"batch_queue\" {\n  source = \"./modules/sqs_queue\"\n\n  queue_name                 = \"batch-job-queue\"\n  visibility_timeout_seconds = 300\n  kms_key_id                 = aws_kms_key.app.id\n  enable_dlq                 = true\n  max_receive_count          = 3\n  enable_dlq_alarm           = true\n  alarm_actions              = [aws_sns_topic.alerts.arn]\n\n  tags = {\n    Environment = \"production\"\n    Application = \"batch-processing\"\n  }\n}\n```\n\n## Inputs\n| Name | Description | Type | Default | Required |\n|------|-------------|------|---------|----------|\n| queue_name | Name of the SQS queue | string | - | yes |\n| fifo_queue | Enable FIFO queue | bool | false | no |\n| content_based_deduplication | Enable deduplication | bool | false | no |\n| visibility_timeout_seconds | Visibility timeout | number | 30 | no |\n| message_retention_seconds | Retention period | number | 345600 | no |\n| max_message_size | Max message size | number | 262144 | no |\n| delay_seconds | Delivery delay | number | 0 | no |\n| receive_wait_time_seconds | Long polling wait | number | 0 | no |\n| kms_key_id | KMS key for encryption | string | null | no |\n| enable_dlq | Enable DLQ | bool | true | no |\n| max_receive_count | Max receives before DLQ | number | 3 | no |\n| dlq_message_retention_seconds | DLQ retention | number | 1209600 | no |\n| queue_policy | IAM policy document | string | null | no |\n| enable_dlq_alarm | Enable DLQ alarm | bool | true | no |\n| dlq_alarm_threshold | DLQ alarm threshold | number | 1 | no |\n| alarm_actions | SNS topics for alarms | list(string) | [] | no |\n| tags | Tags to apply | map(string) | {} | no |\n\n## Outputs\n| Name | Description |\n|------|-------------|\n| queue_id | ID of the queue |\n| queue_arn | ARN of the queue |\n| queue_url | URL of the queue |\n| dlq_id | ID of the DLQ |\n| dlq_arn | ARN of the DLQ |\n| dlq_url | URL of the DLQ |\n\n## Patterns\n- **Decoupling**: Async communication between services\n- **Retry**: Automatic retry with DLQ for failed messages\n- **Observability**: CloudWatch alarms for DLQ monitoring\n"
    },
    {
      "path": "modules/sns_topic/main.tf",
      "content": "# SNS Topic Module - Pub/Sub with Encryption\n# Supports subscriptions, encryption, and access policies\n\nresource \"aws_sns_topic\" \"this\" {\n  name              = var.topic_name\n  display_name      = var.display_name\n  fifo_topic        = var.fifo_topic\n  content_based_deduplication = var.fifo_topic ? var.content_based_deduplication : null\n  kms_master_key_id = var.kms_key_id\n\n  tags = var.tags\n}\n\nresource \"aws_sns_topic_policy\" \"this\" {\n  count  = var.topic_policy != null ? 1 : 0\n  arn    = aws_sns_topic.this.arn\n  policy = var.topic_policy\n}\n\nresource \"aws_sns_topic_subscription\" \"this\" {\n  for_each = { for idx, sub in var.subscriptions : idx => sub }\n\n  topic_arn              = aws_sns_topic.this.arn\n  protocol               = each.value.protocol\n  endpoint               = each.value.endpoint\n  raw_message_delivery   = lookup(each.value, \"raw_message_delivery\", false)\n  filter_policy          = lookup(each.value, \"filter_policy\", null)\n  redrive_policy         = lookup(each.value, \"redrive_policy\", null)\n}\n"
    },
    {
      "path": "modules/sns_topic/variables.tf",
      "content": "variable \"topic_name\" {\n  description = \"Name of the SNS topic\"\n  type        = string\n}\n\nvariable \"display_name\" {\n  description = \"Display name for the topic\"\n  type        = string\n  default     = null\n}\n\nvariable \"fifo_topic\" {\n  description = \"Enable FIFO topic\"\n  type        = bool\n  default     = false\n}\n\nvariable \"content_based_deduplication\" {\n  description = \"Enable content-based deduplication\"\n  type        = bool\n  default     = false\n}\n\nvariable \"kms_key_id\" {\n  description = \"KMS key ID for encryption\"\n  type        = string\n  default     = null\n}\n\nvariable \"topic_