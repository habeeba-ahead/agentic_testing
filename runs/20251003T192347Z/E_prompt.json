```json
BEGIN_JSON
{
  "system": "Application Modernization & Migration to AWS (Terraform + Python)",
  "summary": "Legacy on-prem x86 application requiring lift-and-shift to AWS with IaC (Terraform) and Python automation. MEC compliance gaps must be remediated pre-migration. Target state includes EC2/ECS compute, RDS/S3 storage, VPC networking, and CloudWatch observability. Migration follows phased approach: validate MEC, lift-and-shift VMs, refactor to containers, cutover with failback option.",
  "domains": [
    {
      "name": "Application",
      "scope": "Migrate application workloads from on-prem to AWS EC2 (lift-and-shift), then refactor to ECS/EKS containers for future state modernization",
      "drivers": [
        "Legacy OS and x86 servers require cloud migration",
        "Business objectives demand scalability and performance improvements"
      ],
      "proposed_workstreams": [
        {
          "title": "Lift-and-Shift Migration to EC2",
          "deliverables": [
            "EC2 instances provisioned via Terraform matching on-prem specs",
            "Application deployed and validated in AWS"
          ],
          "success_metrics": [
            "Application functional post-cutover with no critical issues",
            "Performance meets/exceeds baseline throughput/latency"
          ]
        },
        {
          "title": "Containerization Refactor",
          "deliverables": [
            "Application containerized and deployed to ECS/EKS",
            "CI/CD pipeline for container deployments"
          ],
          "success_metrics": [
            "Container orchestration operational",
            "Elastic scaling validated under load"
          ]
        }
      ],
      "dependencies": [
        "Infrastructure",
        "Data",
        "Security & Compliance"
      ],
      "priority": "High",
      "confidence": 0.85,
      "risks": [
        "Performance degradation during migration",
        "Application dependencies not fully documented in discovery"
      ],
      "evidence": [
        {
          "locator": "Section 3: Current State Architecture",
          "excerpt": "Server Architecture: On-prem x86 servers, legacy OS"
        },
        {
          "locator": "Section 4: Target State Architecture",
          "excerpt": "Compute: AWS EC2 for lift-and-shift workloads; ECS/EKS for containerized future state"
        }
      ]
    },
    {
      "name": "Data",
      "scope": "Migrate SQL databases to Amazon RDS, implement S3 for object storage, establish backup/restore to S3 Glacier within RPO/RTO limits",
      "drivers": [
        "SQL-based DBs noted in discovery require cloud-native database services",
        "Backup and DR readiness mandated by MEC"
      ],
      "proposed_workstreams": [
        {
          "title": "Database Migration via AWS DMS",
          "deliverables": [
            "RDS instances provisioned with schema validation",
            "Data migrated using AWS DMS with minimal downtime"
          ],
          "success_metrics": [
            "Schema drift validated pre-cutover",
            "Data integrity verified post-migration"
          ]
        },
        {
          "title": "Backup and DR Strategy",
          "deliverables": [
            "Automated backups to S3 Glacier configured",
            "DR runbook with RPO/RTO compliance"
          ],
          "success_metrics": [
            "Restore tested within RPO/RTO limits",
            "Multi-AZ HA validated"
          ]
        }
      ],
      "dependencies": [
        "Infrastructure",
        "Security & Compliance"
      ],
      "priority": "High",
      "confidence": 0.8,
      "risks": [
        "Schema drift during DMS migration",
        "Vendor licensing tied to on-prem may block cloud DB migration"
      ],
      "evidence": [
        {
          "locator": "Section 3: Current State Architecture",
          "excerpt": "Database: SQL-based DBs noted in discovery template"
        },
        {
          "locator": "Section 8: Migration & Cutover Plan",
          "excerpt": "Data migration via AWS DMS"
        }
      ]
    },
    {
      "name": "Infrastructure",
      "scope": "Provision AWS VPC, subnets, ALB/NLB, EC2/ECS compute, and networking using Terraform IaC with modular, reusable code",
      "drivers": [
        "All infra via Terraform modules required per functional requirements",
        "VPC with private/public subnets and load balancing needed for TSA"
      ],
      "proposed_workstreams": [
        {
          "title": "Terraform IaC Foundation",
          "deliverables": [
            "Modular Terraform code for VPC, subnets, security groups",
            "EC2/ECS compute modules with auto-scaling"
          ],
          "success_metrics": [
            "All infrastructure deployed via Terraform",
            "IaC code passes validation and linting"
          ]
        }
      ],
      "dependencies": [
        "Security & Compliance",
        "Operations/Platform"
      ],
      "priority": "High",
      "confidence": 0.9,
      "risks": [
        "Terraform state management conflicts in multi-team environments",
        "Network latency between on-prem and AWS during hybrid phase"
      ],
      "evidence": [
        {
          "locator": "Section 4: Target State Architecture",
          "excerpt": "Networking: VPC with private/public subnets; ALB/NLB load balancing"
        },
        {
          "locator": "Section 6: Functional Requirements",
          "excerpt": "Provision infrastructure using Terraform (modular, reusable code)"
        }
      ]
    },
    {
      "name": "Integration",
      "scope": "Migrate mix of internal/external APIs and batch file transfers to AWS-native services with Python automation for orchestration",
      "drivers": [
        "Interfaces: Mix of internal and external APIs, batch file transfers",
        "Python automation required for workflows per functional requirements"
      ],
      "proposed_workstreams": [
        {
          "title": "API and Batch Integration Modernization",
          "deliverables": [
            "API Gateway for external APIs with Lambda backends",
            "Step Functions orchestrating batch workflows"
          ],
          "success_metrics": [
            "Python automation operational for workflows",
            "API latency within SLA thresholds"
          ]
        }
      ],
      "dependencies": [
        "Application",
        "Security & Compliance"
      ],
      "priority": "Medium",
      "confidence": 0.7,
      "risks": [
        "Undocumented API dependencies discovered during migration",
        "Batch job timing conflicts during cutover"
      ],
      "evidence": [
        {
          "locator": "Section 3: Current State Architecture",
          "excerpt": "Interfaces: Mix of internal and external APIs, batch file transfers"
        },
        {
          "locator": "Section 6: Functional Requirements",
          "excerpt": "Implement application automation using Python"
        }
      ]
    },
    {
      "name": "Security & Compliance",
      "scope": "Enforce IAM least privilege, KMS encryption at rest/transit, MEC compliance validation, CloudTrail/GuardDuty auditing, and AWS Security Hub baselines",
      "drivers": [
        "MEC compliance gaps must be remediated before migration",
        "Sensitive workloads must have encryption and IAM guardrails per MEC"
      ],
      "proposed_workstreams": [
        {
          "title": "MEC Remediation and Compliance",
          "deliverables": [
            "MEC gap analysis with remediation plan",
            "Supported OS/DB versions, patching, vulnerability compliance"
          ],
          "success_metrics": [
            "MEC compliance validated pre-migration",
            "Security Hub findings resolved"
          ]
        },
        {
          "title": "Encryption and IAM Hardening",
          "deliverables": [
            "KMS keys for encryption at rest/transit",
            "IAM roles with least privilege, AWS SSO integration"
          ],
          "success_metrics": [
            "Encryption enforced on all data stores",
            "IAM policies audited and approved"
          ]
        }
      ],
      "dependencies": [
        "Infrastructure",
        "Data",
        "Operations/Platform"
      ],
      "priority": "High",
      "confidence": 0.85,
      "risks": [
        "MEC gaps delay migration timeline",
        "IAM role sprawl without governance"
      ],
      "evidence": [
        {
          "locator": "Section 5: Minimum Entry Criteria",
          "excerpt": "Applications must remediate any MEC gaps before migration"
        },
        {
          "locator": "Section 7: Non-Functional Requirements",
          "excerpt": "Security: IAM least privilege, encryption, MEC alignment"
        }
      ]
    },
    {
      "name": "Operations/Platform",
      "scope": "Migrate monitoring to CloudWatch/OpenSearch, establish CI/CD pipelines for Terraform/Python, enable auto-scaling and HA via multi-AZ",
      "drivers": [
        "Limited automation in current state requires AWS-native observability",
        "CI/CD pipelines for Terraform and Python automation mandated"
      ],
      "proposed_workstreams": [
        {
          "title": "Observability and Monitoring",
          "deliverables": [
            "CloudWatch logs/metrics, X-Ray tracing configured",
            "OpenSearch dashboards for log analytics"
          ],
          "success_metrics": [
            "Monitoring validation post-go-live",
            "Alerting thresholds tuned and operational"
          ]
        },
        {
          "title": "CI/CD Pipeline Automation",
          "deliverables": [
            "Terraform pipeline with validation/linting",
            "Python Lambda deployment pipeline"
          ],
          "success_metrics": [
            "Pipelines operational with zero manual steps",
            "Deployment frequency increased by 50%"
          ]
        }
      ],
      "dependencies": [
        "Infrastructure",
        "Application"
      ],
      "priority": "High",
      "confidence": 0.8,
      "risks": [
        "CloudWatch costs exceed budget without lifecycle policies",
        "Pipeline failures during cutover window"
      ],
      "evidence": [
        {
          "locator": "Section 3: Current State Architecture",
          "excerpt": "Monitoring: Limited automation, requires migration to AWS-native observability"
        },
        {
          "locator": "Section 6: Functional Requirements",
          "excerpt": "Establish CI/CD pipelines for Terraform and Python automation"
        }
      ]
    },
    {
      "name": "FinOps",
      "scope": "Implement cost controls via right-sized compute, S3 lifecycle management, tagging strategy, budgets, and cost allocation to prevent overruns",
      "drivers": [
        "Cost overruns identified as risk requiring mitigation",
        "Cost Efficiency: Right-sized compute, S3 lifecycle management, tagging"
      ],
      "proposed_workstreams": [
        {
          "title": "Cost Optimization and Governance",
          "deliverables": [
            "Tagging strategy enforced via Terraform",
            "S3 lifecycle policies and compute right-sizing"
          ],
          "success_metrics": [
            "Cost allocation by business unit operational",
            "Monthly cloud spend within 10% of forecast"
          ]
        }
      ],
      "dependencies": [
        "Infrastructure",
        "Operations/Platform"
      ],
      "priority": "Medium",
      "confidence": 0.75,
      "risks": [
        "Untagged resources inflate costs",
        "Auto-scaling misconfiguration causes runaway spend"
      ],
      "evidence": [
        {
          "locator": "Section 9: Risks & Mitigation",
          "excerpt": "Cost overruns: Apply budgets, tagging, lifecycle rules"
        },
        {
          "locator": "Section 7: Non-Functional Requirements",
          "excerpt": "Cost Efficiency: Right-sized compute, S3 lifecycle management, tagging"
        }
      ]
    }
  ],
  "cross_domain_view": {
    "critical_path": [
      "Security & Compliance",
      "Infrastructure",
      "Data",
      "Application",
      "Operations/Platform"
    ],
    "notable_gaps": [
      "Application name and business area not confirmed with client team",
      "Vendor licensing considerations for cloud not detailed",
      "RPO/RTO limits not quantified in BRD",
      "Failback procedure from AWS to on-prem not documented",
      "Hypercare duration and staffing plan missing"
    ],
    "guardrail_conflicts": [
      "MEC requires supported OS/DB versions but current state has legacy OS",
      "Encryption at rest/transit mandated but on-prem baseline unclear",
      "IAM least privilege required but existing access patterns not documented"
    ]
  },
  "recommendations": [
    {
      "horizon": "now",
      "action": "Conduct MEC gap analysis workshop with client to identify remediation tasks blocking migration",
      "owner": "Security & Compliance Lead"
    },
    {
      "horizon": "now",
      "action": "Finalize application name, business area, and dependency mapping from discovery template",
      "owner": "Application Architect"
    },
    {
      "horizon": "now",
      "action": "Design Terraform module structure for VPC, subnets, security groups with state management strategy",
      "owner": "Infrastructure Lead"
    },
    {
      "horizon": "next",
      "action": "Validate AWS DMS schema migration in non-prod environment to identify drift risks",
      "owner": "Data Migration Lead"
    },
    {
      "horizon": "next",
      "action": "Establish CI/CD pipelines for Terraform and Python with automated validation gates",
      "owner": "Platform Engineering"
    },
    {
      "horizon": "next",
      "action": "Implement CloudWatch dashboards and alerting thresholds based on on-prem baseline metrics",
      "owner": "Operations Lead"
    },
    {
      "horizon": "later",
      "action": "Refactor application to ECS/EKS containers post-stabilization of EC2 lift-and-shift",
      "owner": "Application Modernization Team"
    },
    {
      "horizon": "later",
      "action": "Optimize costs via Reserved Instances and Savings Plans after 3 months of usage data",
      "owner": "FinOps Lead"
    }
  ]
}
END_JSON
```