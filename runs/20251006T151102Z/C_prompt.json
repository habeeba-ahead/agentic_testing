```json
{
  "bundle_manifest": [
    {
      "path": "infra/terraform/providers_override.tf",
      "purpose": "Provider configuration with empty S3 backend for CI injection",
      "generated_bytes": 512
    },
    {
      "path": "infra/terraform/variables.tf",
      "purpose": "Global variables (project, env, region, tags)",
      "generated_bytes": 420
    },
    {
      "path": "infra/terraform/dynamodb.tf",
      "purpose": "DynamoDB tables for orders, inventory, and idempotency",
      "generated_bytes": 1850
    },
    {
      "path": "infra/terraform/eventbridge.tf",
      "purpose": "EventBridge bus and rules for order/inventory/CRM events",
      "generated_bytes": 2100
    },
    {
      "path": "infra/terraform/s3.tf",
      "purpose": "S3 bucket for CRM CSV ingestion",
      "generated_bytes": 680
    },
    {
      "path": "infra/terraform/lambda_orders.tf",
      "purpose": "Lambda functions for orders service (create, get)",
      "generated_bytes": 2400
    },
    {
      "path": "infra/terraform/lambda_inventory.tf",
      "purpose": "Lambda function for inventory reservation",
      "generated_bytes": 1900
    },
    {
      "path": "infra/terraform/lambda_receipts.tf",
      "purpose": "Lambda function for receipts worker",
      "generated_bytes": 1600
    },
    {
      "path": "infra/terraform/lambda_ingestor.tf",
      "purpose": "Lambda function for CRM CSV ingestion",
      "generated_bytes": 1700
    },
    {
      "path": "infra/terraform/lambda_health.tf",
      "purpose": "Lambda function for health check endpoint",
      "generated_bytes": 1200
    },
    {
      "path": "infra/terraform/api_gateway.tf",
      "purpose": "HTTP API Gateway with routes to Lambda functions",
      "generated_bytes": 3200
    },
    {
      "path": "infra/terraform/iam_orders.tf",
      "purpose": "IAM role and policies for orders Lambda functions",
      "generated_bytes": 1800
    },
    {
      "path": "infra/terraform/iam_inventory.tf",
      "purpose": "IAM role and policies for inventory Lambda function",
      "generated_bytes": 1700
    },
    {
      "path": "infra/terraform/iam_receipts.tf",
      "purpose": "IAM role and policies for receipts Lambda function",
      "generated_bytes": 1200
    },
    {
      "path": "infra/terraform/iam_ingestor.tf",
      "purpose": "IAM role and policies for CRM ingestor Lambda function",
      "generated_bytes": 1600
    },
    {
      "path": "infra/terraform/cloudwatch_alarms.tf",
      "purpose": "CloudWatch alarms for Lambda errors and API 5xx",
      "generated_bytes": 2800
    },
    {
      "path": "infra/terraform/outputs.tf",
      "purpose": "Terraform outputs for API endpoint, table names, bus name",
      "generated_bytes": 650
    },
    {
      "path": "src/orders/glue.py",
      "purpose": "Adapter wrapper for orders handlers",
      "generated_bytes": 420
    },
    {
      "path": "src/inventory/glue.py",
      "purpose": "Adapter wrapper for inventory handler",
      "generated_bytes": 280
    },
    {
      "path": "src/receipts/glue.py",
      "purpose": "Adapter wrapper for receipts handler",
      "generated_bytes": 240
    },
    {
      "path": "src/ingestor/glue.py",
      "purpose": "Adapter wrapper for ingestor handler",
      "generated_bytes": 260
    },
    {
      "path": "src/ops/glue.py",
      "purpose": "Adapter wrapper for health handler",
      "generated_bytes": 220
    },
    {
      "path": "tests/unit/test_orders.py",
      "purpose": "Unit tests for orders handlers",
      "generated_bytes": 1800
    },
    {
      "path": "tests/unit/test_inventory.py",
      "purpose": "Unit tests for inventory handler",
      "generated_bytes": 1600
    },
    {
      "path": "tests/unit/test_receipts.py",
      "purpose": "Unit tests for receipts handler",
      "generated_bytes": 800
    },
    {
      "path": "tests/unit/test_ingestor.py",
      "purpose": "Unit tests for CRM ingestor handler",
      "generated_bytes": 1200
    },
    {
      "path": "tests/unit/test_health.py",
      "purpose": "Unit tests for health handler",
      "generated_bytes": 600
    },
    {
      "path": "tests/contracts/test_api_contracts.py",
      "purpose": "Contract tests for API routes and payload shapes",
      "generated_bytes": 1400
    },
    {
      "path": ".github/workflows/ci.yml",
      "purpose": "CI/CD pipeline with lint, test, package, plan, and apply stages",
      "generated_bytes": 4200
    },
    {
      "path": "ops/iam_policies/orders_ddb_policy.json",
      "purpose": "IAM policy document for orders DynamoDB access",
      "generated_bytes": 520
    },
    {
      "path": "ops/iam_policies/orders_eventbridge_policy.json",
      "purpose": "IAM policy document for orders EventBridge access",
      "generated_bytes": 480
    },
    {
      "path": "ops/iam_policies/inventory_ddb_policy.json",
      "purpose": "IAM policy document for inventory DynamoDB access",
      "generated_bytes": 540
    },
    {
      "path": "ops/iam_policies/inventory_eventbridge_policy.json",
      "purpose": "IAM policy document for inventory EventBridge access",
      "generated_bytes": 480
    },
    {
      "path": "ops/iam_policies/ingestor_s3_policy.json",
      "purpose": "IAM policy document for ingestor S3 access",
      "generated_bytes": 460
    },
    {
      "path": "ops/iam_policies/ingestor_eventbridge_policy.json",
      "purpose": "IAM policy document for ingestor EventBridge access",
      "generated_bytes": 480
    },
    {
      "path": "requirements.txt",
      "purpose": "Python dependencies for Lambda functions",
      "generated_bytes": 120
    },
    {
      "path": "requirements-dev.txt",
      "purpose": "Python dev dependencies for testing and linting",
      "generated_bytes": 180
    },
    {
      "path": ".gitignore",
      "purpose": "Git ignore patterns for Python, Terraform, and build artifacts",
      "generated_bytes": 320
    }
  ],
  "src": {
    "files": [
      {
        "path": "src/orders/glue.py",
        "content": "# src/orders/glue.py\n\"\"\"Adapter glue for orders handlers.\"\"\"\nfrom src.orders.handlers import create_order as _create_order\nfrom src.orders.handlers import get_order as _get_order\n\ndef create_order(event, context):\n    \"\"\"Wrapper for create_order handler.\"\"\"\n    return _create_order(event, context)\n\ndef get_order(event, context):\n    \"\"\"Wrapper for get_order handler.\"\"\"\n    return _get_order(event, context)\n"
      },
      {
        "path": "src/inventory/glue.py",
        "content": "# src/inventory/glue.py\n\"\"\"Adapter glue for inventory handlers.\"\"\"\nfrom src.inventory.handlers import reserve as _reserve\n\ndef reserve(event, context):\n    \"\"\"Wrapper for reserve handler.\"\"\"\n    return _reserve(event, context)\n"
      },
      {
        "path": "src/receipts/glue.py",
        "content": "# src/receipts/glue.py\n\"\"\"Adapter glue for receipts worker.\"\"\"\nfrom src.receipts.worker import handler as _handler\n\ndef handler(event, context):\n    \"\"\"Wrapper for receipts handler.\"\"\"\n    return _handler(event, context)\n"
      },
      {
        "path": "src/ingestor/glue.py",
        "content": "# src/ingestor/glue.py\n\"\"\"Adapter glue for CRM ingestor.\"\"\"\nfrom src.ingestor.process_csv import handler as _handler\n\ndef handler(event, context):\n    \"\"\"Wrapper for ingestor handler.\"\"\"\n    return _handler(event, context)\n"
      },
      {
        "path": "src/ops/glue.py",
        "content": "# src/ops/glue.py\n\"\"\"Adapter glue for health check.\"\"\"\nfrom src.ops.health import handler as _handler\n\ndef handler(event, context):\n    \"\"\"Wrapper for health handler.\"\"\"\n    return _handler(event, context)\n"
      }
    ]
  },
  "infra": {
    "terraform": {
      "files": [
        {
          "path": "infra/terraform/providers_override.tf",
          "content": "# infra/terraform/providers_override.tf\nterraform {\n  required_version = \">= 1.7.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 5.0\"\n    }\n  }\n  # Empty backend block; CI supplies -backend-config at runtime\n  backend \"s3\" {}\n}\n\nprovider \"aws\" {\n  region = var.region\n  default_tags {\n    tags = var.tags\n  }\n}\n"
        },
        {
          "path": "infra/terraform/variables.tf",
          "content": "# infra/terraform/variables.tf\nvariable \"project\" {\n  type        = string\n  description = \"Project name for resource naming\"\n}\n\nvariable \"env\" {\n  type        = string\n  description = \"Environment (staging, prod)\"\n}\n\nvariable \"region\" {\n  type        = string\n  description = \"AWS region\"\n  default     = \"us-east-1\"\n}\n\nvariable \"tags\" {\n  type        = map(string)\n  description = \"Common tags for all resources\"\n  default     = {}\n}\n"
        },
        {
          "path": "infra/terraform/dynamodb.tf",
          "content": "# infra/terraform/dynamodb.tf\n\n# Orders table\nresource \"aws_dynamodb_table\" \"orders\" {\n  name         = \"${var.project}-${var.env}-orders\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"order_id\"\n\n  attribute {\n    name = \"order_id\"\n    type = \"S\"\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-orders\"\n  })\n}\n\n# Inventory table (includes idempotency markers with TTL)\nresource \"aws_dynamodb_table\" \"inventory\" {\n  name         = \"${var.project}-${var.env}-inventory\"\n  billing_mode = \"PAY_PER_REQUEST\"\n  hash_key     = \"sku\"\n\n  attribute {\n    name = \"sku\"\n    type = \"S\"\n  }\n\n  ttl {\n    attribute_name = \"ttl\"\n    enabled        = true\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-inventory\"\n  })\n}\n\noutput \"orders_table_name\" {\n  value = aws_dynamodb_table.orders.name\n}\n\noutput \"orders_table_arn\" {\n  value = aws_dynamodb_table.orders.arn\n}\n\noutput \"inventory_table_name\" {\n  value = aws_dynamodb_table.inventory.name\n}\n\noutput \"inventory_table_arn\" {\n  value = aws_dynamodb_table.inventory.arn\n}\n"
        },
        {
          "path": "infra/terraform/eventbridge.tf",
          "content": "# infra/terraform/eventbridge.tf\n\n# Custom event bus\nresource \"aws_cloudwatch_event_bus\" \"main\" {\n  name = \"${var.project}-${var.env}-bus\"\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-bus\"\n  })\n}\n\n# Rule: ReceiptGenerated → receipts worker\nresource \"aws_cloudwatch_event_rule\" \"receipt_generated\" {\n  name           = \"${var.project}-${var.env}-receipt-generated\"\n  event_bus_name = aws_cloudwatch_event_bus.main.name\n  event_pattern = jsonencode({\n    source      = [\"app.orders\"]\n    detail-type = [\"ReceiptGenerated\"]\n  })\n  tags = var.tags\n}\n\nresource \"aws_cloudwatch_event_target\" \"receipt_target\" {\n  rule           = aws_cloudwatch_event_rule.receipt_generated.name\n  event_bus_name = aws_cloudwatch_event_bus.main.name\n  arn            = aws_lambda_function.receipts_worker.arn\n}\n\nresource \"aws_lambda_permission\" \"receipts_eventbridge\" {\n  statement_id  = \"AllowEventBridgeInvokeReceipts\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.receipts_worker.function_name\n  principal     = \"events.amazonaws.com\"\n  source_arn    = aws_cloudwatch_event_rule.receipt_generated.arn\n}\n\noutput \"event_bus_name\" {\n  value = aws_cloudwatch_event_bus.main.name\n}\n\noutput \"event_bus_arn\" {\n  value = aws_cloudwatch_event_bus.main.arn\n}\n"
        },
        {
          "path": "infra/terraform/s3.tf",
          "content": "# infra/terraform/s3.tf\n\n# CRM ingestion bucket\nresource \"aws_s3_bucket\" \"crm_ingestion\" {\n  bucket        = \"${var.project}-${var.env}-crm-ingestion\"\n  force_destroy = true\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-crm-ingestion\"\n  })\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"crm_ingestion_block\" {\n  bucket                  = aws_s3_bucket.crm_ingestion.id\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\noutput \"crm_bucket_name\" {\n  value = aws_s3_bucket.crm_ingestion.bucket\n}\n\noutput \"crm_bucket_arn\" {\n  value = aws_s3_bucket.crm_ingestion.arn\n}\n"
        },
        {
          "path": "infra/terraform/lambda_orders.tf",
          "content": "# infra/terraform/lambda_orders.tf\n\ndata \"archive_file\" \"orders_package\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/../../src\"\n  output_path = \"${path.module}/../../build/orders.zip\"\n}\n\n# Create Order Lambda\nresource \"aws_lambda_function\" \"create_order\" {\n  function_name = \"${var.project}-${var.env}-create-order\"\n  role          = aws_iam_role.orders_exec.arn\n  runtime       = \"python3.11\"\n  handler       = \"orders.glue.create_order\"\n  timeout       = 15\n  memory_size   = 512\n  filename      = data.archive_file.orders_package.output_path\n  source_code_hash = data.archive_file.orders_package.output_base64sha256\n\n  environment {\n    variables = {\n      ORDERS_TABLE   = aws_dynamodb_table.orders.name\n      EVENT_BUS_NAME = aws_cloudwatch_event_bus.main.name\n    }\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-create-order\"\n  })\n}\n\n# Get Order Lambda\nresource \"aws_lambda_function\" \"get_order\" {\n  function_name = \"${var.project}-${var.env}-get-order\"\n  role          = aws_iam_role.orders_exec.arn\n  runtime       = \"python3.11\"\n  handler       = \"orders.glue.get_order\"\n  timeout       = 15\n  memory_size   = 512\n  filename      = data.archive_file.orders_package.output_path\n  source_code_hash = data.archive_file.orders_package.output_base64sha256\n\n  environment {\n    variables = {\n      ORDERS_TABLE   = aws_dynamodb_table.orders.name\n      EVENT_BUS_NAME = aws_cloudwatch_event_bus.main.name\n    }\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-get-order\"\n  })\n}\n\noutput \"create_order_function_arn\" {\n  value = aws_lambda_function.create_order.arn\n}\n\noutput \"get_order_function_arn\" {\n  value = aws_lambda_function.get_order.arn\n}\n"
        },
        {
          "path": "infra/terraform/lambda_inventory.tf",
          "content": "# infra/terraform/lambda_inventory.tf\n\ndata \"archive_file\" \"inventory_package\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/../../src\"\n  output_path = \"${path.module}/../../build/inventory.zip\"\n}\n\nresource \"aws_lambda_function\" \"inventory_reserve\" {\n  function_name = \"${var.project}-${var.env}-inventory-reserve\"\n  role          = aws_iam_role.inventory_exec.arn\n  runtime       = \"python3.11\"\n  handler       = \"inventory.glue.reserve\"\n  timeout       = 15\n  memory_size   = 512\n  filename      = data.archive_file.inventory_package.output_path\n  source_code_hash = data.archive_file.inventory_package.output_base64sha256\n\n  environment {\n    variables = {\n      INVENTORY_TABLE = aws_dynamodb_table.inventory.name\n      EVENT_BUS_NAME  = aws_cloudwatch_event_bus.main.name\n    }\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-inventory-reserve\"\n  })\n}\n\noutput \"inventory_reserve_function_arn\" {\n  value = aws_lambda_function.inventory_reserve.arn\n}\n"
        },
        {
          "path": "infra/terraform/lambda_receipts.tf",
          "content": "# infra/terraform/lambda_receipts.tf\n\ndata \"archive_file\" \"receipts_package\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/../../src\"\n  output_path = \"${path.module}/../../build/receipts.zip\"\n}\n\nresource \"aws_lambda_function\" \"receipts_worker\" {\n  function_name = \"${var.project}-${var.env}-receipts-worker\"\n  role          = aws_iam_role.receipts_exec.arn\n  runtime       = \"python3.11\"\n  handler       = \"receipts.glue.handler\"\n  timeout       = 15\n  memory_size   = 512\n  filename      = data.archive_file.receipts_package.output_path\n  source_code_hash = data.archive_file.receipts_package.output_base64sha256\n\n  environment {\n    variables = {\n      EVENT_BUS_NAME = aws_cloudwatch_event_bus.main.name\n    }\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-receipts-worker\"\n  })\n}\n\noutput \"receipts_worker_function_arn\" {\n  value = aws_lambda_function.receipts_worker.arn\n}\n"
        },
        {
          "path": "infra/terraform/lambda_ingestor.tf",
          "content": "# infra/terraform/lambda_ingestor.tf\n\ndata \"archive_file\" \"ingestor_package\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/../../src\"\n  output_path = \"${path.module}/../../build/ingestor.zip\"\n}\n\nresource \"aws_lambda_function\" \"crm_ingestor\" {\n  function_name = \"${var.project}-${var.env}-crm-ingestor\"\n  role          = aws_iam_role.ingestor_exec.arn\n  runtime       = \"python3.11\"\n  handler       = \"ingestor.glue.handler\"\n  timeout       = 60\n  memory_size   = 512\n  filename      = data.archive_file.ingestor_package.output_path\n  source_code_hash = data.archive_file.ingestor_package.output_base64sha256\n\n  environment {\n    variables = {\n      EVENT_BUS_NAME = aws_cloudwatch_event_bus.main.name\n    }\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-crm-ingestor\"\n  })\n}\n\n# S3 trigger\nresource \"aws_lambda_permission\" \"s3_invoke_ingestor\" {\n  statement_id  = \"AllowS3InvokeIngestor\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.crm_ingestor.function_name\n  principal     = \"s3.amazonaws.com\"\n  source_arn    = aws_s3_bucket.crm_ingestion.arn\n}\n\nresource \"aws_s3_bucket_notification\" \"crm_notification\" {\n  bucket = aws_s3_bucket.crm_ingestion.id\n\n  lambda_function {\n    lambda_function_arn = aws_lambda_function.crm_ingestor.arn\n    events              = [\"s3:ObjectCreated:*\"]\n    filter_suffix       = \".csv\"\n  }\n\n  depends_on = [aws_lambda_permission.s3_invoke_ingestor]\n}\n\noutput \"crm_ingestor_function_arn\" {\n  value = aws_lambda_function.crm_ingestor.arn\n}\n"
        },
        {
          "path": "infra/terraform/lambda_health.tf",
          "content": "# infra/terraform/lambda_health.tf\n\ndata \"archive_file\" \"health_package\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/../../src\"\n  output_path = \"${path.module}/../../build/health.zip\"\n}\n\nresource \"aws_lambda_function\" \"health\" {\n  function_name = \"${var.project}-${var.env}-health\"\n  role          = aws_iam_role.health_exec.arn\n  runtime       = \"python3.11\"\n  handler       = \"ops.glue.handler\"\n  timeout       = 10\n  memory_size   = 256\n  filename      = data.archive_file.health_package.output_path\n  source_code_hash = data.archive_file.health_package.output_base64sha256\n\n  environment {\n    variables = {\n      BUILD_SHA = \"staging\"\n    }\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-health\"\n  })\n}\n\nresource \"aws_iam_role\" \"health_exec\" {\n  name = \"${var.project}-${var.env}-health-exec\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = { Service = \"lambda.amazonaws.com\" }\n      Action = \"sts:AssumeRole\"\n    }]\n  })\n  tags = var.tags\n}\n\nresource \"aws_iam_role_policy_attachment\" \"health_logs\" {\n  role       = aws_iam_role.health_exec.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n\noutput \"health_function_arn\" {\n  value = aws_lambda_function.health.arn\n}\n"
        },
        {
          "path": "infra/terraform/api_gateway.tf",
          "content": "# infra/terraform/api_gateway.tf\n\nresource \"aws_apigatewayv2_api\" \"http_api\" {\n  name          = \"${var.project}-${var.env}-api\"\n  protocol_type = \"HTTP\"\n\n  cors_configuration {\n    allow_headers = [\"*\"]\n    allow_methods = [\"*\"]\n    allow_origins = [\"*\"]\n  }\n\n  tags = merge(var.tags, {\n    Name = \"${var.project}-${var.env}-api\"\n  })\n}\n\n# Stage\nresource \"aws_apigatewayv2_stage\" \"default\" {\n  api_id      = aws_apigatewayv2_api.http_api.id\n  name        = \"$default\"\n  auto_deploy = true\n\n  tags = var.tags\n}\n\n# Integration: POST /orders → create_order\nresource \"aws_apigatewayv2_integration\" \"create_order\" {\n  api_id                 = aws_apigatewayv2_api.http_api.id\n  integration_type       = \"AWS_PROXY\"\n  integration_method     = \"POST\"\n  integration_uri        = aws_lambda_function.create_order.arn\n  payload_format_version = \"2.0\"\n}\n\nresource \"aws_apigatewayv2_route\" \"create_order\" {\n  api_id    = aws_apigatewayv2_api.http_api.id\n  route_key = \"POST /orders\"\n  target    = \"integrations/${aws_apigatewayv2_integration.create_order.id}\"\n}\n\nresource \"aws_lambda_permission\" \"create_order_api\" {\n  statement_id  = \"AllowAPIInvokeCreateOrder\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.create_order.function_name\n  principal     = \"apigateway.amazonaws.com\"\n  source_arn    = \"${aws_apigatewayv2_api.http_api.execution_arn}/*/*/orders\"\n}\n\n# Integration: GET /orders/{order_id} → get_order\nresource \"aws_apigatewayv2_integration\" \"get_order\" {\n  api_id                 = aws_apigatewayv2_api.http_api.id\n  integration_type       = \"AWS_PROXY\"\n  integration_method     = \"POST\"\n  integration_uri        = aws_lambda_function.get_order.arn\n  payload_format_version = \"2.0\"\n}\n\nresource \"aws_apigatewayv2_route\" \"get_order\" {\n  api_id    = aws_apigatewayv2_api.http_api.id\n  route_key = \"GET /orders/{order_id}\"\n  target    = \"integrations/${aws_apigatewayv2_integration.get_order.id}\"\n}\n\nresource \"aws_lambda_permission\" \"get_order_api\" {\n  statement_id  = \"AllowAPIInvokeGetOrder\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.get_order.function_name\n  principal     = \"apigateway.amazonaws.com\"\n  source_arn    = \"${aws_apigatewayv2_api.http_api.execution_arn}/*/*/orders/*\"\n}\n\n# Integration: POST /inventory/reserve → inventory_reserve\nresource \"aws_apigatewayv2_integration\" \"inventory_reserve\" {\n  api_id                 = aws_apigatewayv2_api.http_api.id\n  integration_type       = \"AWS_PROXY\"\n  integration_method     = \"POST\"\n  integration_uri        = aws_lambda_function.inventory_reserve.arn\n  payload_format_version = \"2.0\"\n}\n\nresource \"aws_apigatewayv2_route\" \"inventory_reserve\" {\n  api_id    = aws_apigatewayv2_api.http_api.id\n  route_key = \"POST /inventory/reserve\"\n  target    = \"integrations/${aws_apigatewayv2_integration.inventory_reserve.id}\"\n}\n\nresource \"aws_lambda_permission\" \"inventory_reserve_api\" {\n  statement_id  = \"AllowAPIInvokeInventoryReserve\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.inventory_reserve.function_name\n  principal     = \"apigateway.amazonaws.com\"\n  source_arn    = \"${aws_apigatewayv2_api.http_api.execution_arn}/*/*/inventory/reserve\"\n}\n\n# Integration: GET /health → health\nresource \"aws_apigatewayv2_integration\" \"health\" {\n  api_id                 = aws_apigatewayv2_api.http_api.id\n  integration_type       = \"AWS_PROXY\"\n  integration_method     = \"POST\"\n  integration_uri        = aws_lambda_function.health.arn\n  payload_format_version = \"2.0\"\n}\n\nresource \"aws_apigatewayv2_route\" \"health\" {\n  api_id    = aws_apigatewayv2_api.http_api.id\n  route_key = \"GET /health\"\n  target    = \"integrations/${aws_apigatewayv2_integration.health.id}\"\n}\n\nresource \"aws_lambda_permission\" \"health_api\" {\n  statement_id  = \"AllowAPIInvokeHealth\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.health.function_name\n  principal     = \"apigateway.amazonaws.com\"\n  source_arn    = \"${aws_apigatewayv2_api.http_api.execution_arn}/*/*/health\"\n}\n\noutput \"api_endpoint\" {\n  value = aws_apigatewayv2_api.http_api.api_endpoint\n}\n"
        },
        {
          "path": "infra/terraform/iam_orders.tf",
          "content": "# infra/terraform/iam_orders.tf\n\nresource \"aws_iam_role\" \"orders_exec\" {\n  name = \"${var.project}-${var.env}-orders-exec\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = { Service = \"lambda.amazonaws.com\" }\n      Action = \"sts:AssumeRole\"\n    }]\n  })\n  tags = var.tags\n}\n\nresource \"aws_iam_role_policy_attachment\" \"orders_logs\" {\n  role       = aws_iam_role.orders_exec.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n\n# DynamoDB access policy\nresource \"aws_iam_role_policy\" \"orders_ddb\" {\n  name = \"${var.project}-${var.env}-orders-ddb\"\n  role = aws_iam_role.orders_exec.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"dynamodb:PutItem\",\n          \"dynamodb:GetItem\"\n        ]\n        Resource = aws_dynamodb_table.orders.arn\n      }\n    ]\n  })\n}\n\n# EventBridge access policy\nresource \"aws_iam_role_policy\" \"orders_eventbridge\" {\n  name = \"${var.project}-${var.env}-orders-eventbridge\"\n  role = aws_iam_role.orders_exec.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = \"events:PutEvents\"\n        Resource = aws_cloudwatch_event_bus.main.arn\n      }\n    ]\n  })\n}\n"
        },
        {
          "path": "infra/terraform/iam_inventory.tf",
          "content": "# infra/terraform/iam_inventory.tf\n\nresource \"aws_iam_role\" \"inventory_exec\" {\n  name = \"${var.project}-${var.env}-inventory-exec\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = { Service = \"lambda.amazonaws.com\" }\n      Action = \"sts:AssumeRole\"\n    }]\n  })\n  tags = var.tags\n}\n\nresource \"aws_iam_role_policy_attachment\" \"inventory_logs\" {\n  role       = aws_iam_role.inventory_exec.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n\n# DynamoDB access policy\nresource \"aws_iam_role_policy\" \"inventory_ddb\" {\n  name = \"${var.project}-${var.env}-inventory-ddb\"\n  role = aws_iam_role.inventory_exec.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"dynamodb:PutItem\",\n          \"dynamodb:UpdateItem\"\n        ]\n        Resource = aws_dynamodb_table.inventory.arn\n      }\n    ]\n  })\n}\n\n# EventBridge access policy\nresource \"aws_iam_role_policy\" \"inventory_eventbridge\" {\n  name = \"${var.project}-${var.env}-inventory-eventbridge\"\n  role = aws_iam_role.inventory_exec.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = \"events:PutEvents\"\n        Resource = aws_cloudwatch_event_bus.main.arn\n      }\n    ]\n  })\n}\n"
        },
        {
          "path": "infra/terraform/iam_receipts.tf",
          "content": "# infra/terraform/iam_receipts.tf\n\nresource \"aws_iam_role\" \"receipts_exec\" {\n  name = \"${var.project}-${var.env}-receipts-exec\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = { Service = \"lambda.amazonaws.com\" }\n      Action = \"sts:AssumeRole\"\n    }]\n  })\n  tags = var.tags\n}\n\nresource \"aws_iam_role_policy_attachment\" \"receipts_logs\" {\n  role       = aws_iam_role.receipts_exec.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n"
        },
        {
          "path": "infra/terraform/iam_ingestor.tf",
          "content": "# infra/terraform/iam_ingestor.tf\n\nresource \"aws_iam_role\" \"ingestor_exec\" {\n  name = \"${var.project}-${var.env}-ingestor-exec\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = { Service = \"lambda.amazonaws.com\" }\n      Action = \"sts:AssumeRole\"\n    }]\n  })\n  tags = var.tags\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ingestor_logs\" {\n  role       = aws_iam_role.ingestor_exec.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n}\n\n# S3 access policy\nresource \"aws_iam_role_policy\" \"ingestor_s3\" {\n  name = \"${var.project}-${var.env}-ingestor-s3\"\n  role = aws_iam_role.ingestor_exec.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = \"s3:GetObject\"\n        Resource = \"${aws_s3_bucket.crm_ingestion.arn}/*\"\n      }\n    ]\n  })\n}\n\n# EventBridge access policy\nresource \"aws_iam_role_policy\" \"ingestor_eventbridge\" {\n  name = \"${var.project}-${var.env}-ingestor-eventbridge\"\n  role = aws_iam_role.ingestor_exec.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = \"events:PutEvents\"\n        Resource = aws_cloudwatch_event_bus.main.arn\n      }\n    ]\n  })\n}\n"
        },
        {
          "path": "infra/terraform/cloudwatch_alarms.tf",
          "content": "# infra/terraform/cloudwatch_alarms.tf\n\n# Orders create_order errors\nresource \"aws_cloudwatch_metric_alarm\" \"create_order_errors\" {\n  alarm_name          = \"${var.project}-${var.env}-create-order-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"Errors\"\n  namespace           = \"AWS/Lambda\"\n  period              = 60\n  statistic           = \"Sum\"\n  threshold           = 5\n  alarm_description   = \"Alarm when create_order Lambda errors exceed threshold\"\n  dimensions = {\n    FunctionName = aws_lambda_function.create_order.function_name\n  }\n  tags = var.tags\n}\n\n# Orders get_order errors\nresource \"aws_cloudwatch_metric_alarm\" \"get_order_errors\" {\n  alarm_name          = \"${var.project}-${var.env}-get-order-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"Errors\"\n  namespace           = \"AWS/Lambda\"\n  period              = 60\n  statistic           = \"Sum\"\n  threshold           = 5\n  alarm_description   = \"Alarm when get_order Lambda errors exceed threshold\"\n  dimensions = {\n    FunctionName = aws_lambda_function.get_order.function_name\n  }\n  tags = var.tags\n}\n\n# Inventory reserve errors\nresource \"aws_cloudwatch_metric_alarm\" \"inventory_reserve_errors\" {\n  alarm_name          = \"${var.project}-${var.env}-inventory-reserve-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"Errors\"\n  namespace           = \"AWS/Lambda\"\n  period              = 60\n  statistic           = \"Sum\"\n  threshold           = 5\n  alarm_description   = \"Alarm when inventory_reserve Lambda errors exceed threshold\"\n  dimensions = {\n    FunctionName = aws_lambda_function.inventory_reserve.function_name\n  }\n  tags = var.tags\n}\n\n# Receipts worker errors\nresource \"aws_cloudwatch_metric_alarm\" \"receipts_worker_errors\" {\n  alarm_name          = \"${var.project}-${var.env}-receipts-worker-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"Errors\"\n  namespace           = \"AWS/Lambda\"\n  period              = 60\n  statistic           = \"Sum\"\n  threshold           = 5\n  alarm_description   = \"Alarm when receipts_worker Lambda errors exceed threshold\"\n  dimensions = {\n    FunctionName = aws_lambda_function.receipts_worker.function_name\n  }\n  tags = var.tags\n}\n\n# CRM ingestor errors\nresource \"aws_cloudwatch_metric_alarm\" \"crm_ingestor_errors\" {\n  alarm_name          = \"${var.project}-${var.env}-crm-ingestor-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"Errors\"\n  namespace           = \"AWS/Lambda\"\n  period              = 60\n  statistic           = \"Sum\"\n  threshold           = 5\n  alarm_description   = \"Alarm when crm_ingestor Lambda errors exceed threshold\"\n  dimensions = {\n    FunctionName = aws_lambda_function.crm_ingestor.function_name\n  }\n  tags = var.tags\n}\n\n# API Gateway 5xx errors\nresource \"aws_cloudwatch_metric_alarm\" \"api_5xx_errors\" {\n  alarm_name          = \"${var.project}-${var.env}-api-5xx-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = 1\n  metric_name         = \"5XXError\"\n  namespace           = \"AWS/ApiGateway\"\n  period              = 60\n  statistic           = \"Sum\"\n  threshold           = 10\n  alarm_description   = \"Alarm when API Gateway 5xx errors exceed threshold\"\n  dimensions = {\n    ApiId = aws_apigatewayv2_api.http_api.id\n  }\n  tags = var.tags\n}\n"
        },
        {
          "path": "infra/terraform/outputs.tf",
          "content": "# infra/terraform/outputs.tf\n\noutput \"api_endpoint\" {\n  description = \"HTTP API Gateway endpoint\"\n  value       = aws_apigatewayv2_api.http_api.api_endpoint\n}\n\noutput \"orders_table_name\" {\n  description = \"Orders DynamoDB table name\"\n  value       = aws_dynamodb_table.orders.name\n}\n\noutput \"inventory_table_name\" {\n  description = \"Inventory DynamoDB table name\"\n  value       = aws_dynamodb_table.inventory.name\n}\n\noutput \"event_bus_name\" {\n  description = \"EventBridge bus name\"\n  value       = aws_cloudwatch_event_bus.main.name\n}\n\noutput \"crm_bucket_name\" {\n  description = \"CRM ingestion S3 bucket name\"\n  value       = aws_s3_bucket.crm_ingestion.bucket\n}\n"
        }
      ]
    }
  },
  "ci": {
    "workflows": [
      {
        "path": ".github/workflows/ci.yml",
        "content": "name: CI/CD Pipeline\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\npermissions:\n  id-token: write\n  contents: read\n\nenv:\n  AWS_REGION: us-east-1\n  TF_VERSION: 1.7.0\n  PYTHON_VERSION: '3.11'\n\njobs:\n  lint:\n    name: Lint\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      \n      - name: Install dependencies\n        run: |\n          pip install -r requirements-dev.txt\n      \n      - name: Run ruff\n        run: |\n          ruff check src/ tests/\n      \n      - name: Run flake8\n        run: |\n          flake8 src/ tests/ --max-line-length=120\n\n  test:\n    name: Test\n    runs-on: ubuntu-latest\n    needs: lint\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      \n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install -r requirements-dev.txt\n      \n      - name: Run unit tests\n        run: |\n          pytest tests/unit/ -v --cov=src --cov-report=term-missing\n      \n      - name: Run contract tests\n        run: |\n          pytest tests/contracts/ -v\n\n  package:\n    name: Package\n    runs-on: ubuntu-latest\n    needs: test\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n      \n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt -t src/\n      \n      - name: Create build directory\n        run: mkdir -p build\n      \n      - name: Package Lambda functions\n        run: |\n          cd src && zip -r ../build/lambda.zip . -x '*.pyc' -x '__pycache__/*'\n      \n      - name: Upload artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: lambda-package\n          path: build/lambda.zip\n\n  terraform-plan:\n    name: Terraform Plan\n    runs-on: ubuntu-latest\n    needs: package\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Download package\n        uses: actions/download-artifact@v4\n        with:\n          name: lambda-package\n          path: build/\n      \n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}\n          aws-region: ${{ env.AWS_REGION }}\n      \n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v3\n        with:\n          terraform_version: ${{ env.TF_VERSION }}\n      \n      - name: Terraform fmt\n        working-directory: infra/terraform\n        run: terraform fmt -check\n      \n      - name: Terraform Init\n        working-directory: infra/terraform\n        run: |\n          terraform init \\\n            -backend-config=\"bucket=${{ secrets.TF_STATE_BUCKET }}\" \\\n            -backend-config=\"key=staging/terraform.tfstate\" \\\n            -backend-config=\"region=${{ env.AWS_REGION }}\" \\\n            -backend-config=\"dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}\"\n      \n      - name: Terraform Validate\n        working-directory: infra/terraform\n        run: terraform validate\n      \n      - name: Terraform Plan\n        working-directory: infra/terraform\n        run: |\n          terraform plan \\\n            -var=\"project=${{ secrets.PROJECT_NAME }}\" \\\n            -var=\"env=staging\" \\\n            -var=\"region=${{ env.AWS_REGION }}\" \\\n            -out=tfplan\n      \n      - name: Upload plan\n        uses: actions/upload-artifact@v4\n        with:\n          name: terraform-plan\n          path: infra/terraform/tfplan\n\n  terraform-apply:\n    name: Terraform Apply (Staging)\n    runs-on: ubuntu-latest\n    needs: terraform-plan\n    if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n    environment:\n      name: staging\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Download package\n        uses: actions/download-artifact@v4\n        with:\n          name: lambda-package\n          path: build/\n      \n      - name: Download plan\n        uses: actions/download-artifact@v4\n        with:\n          name: terraform-plan\n          path: infra/terraform/\n      \n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}\n          aws-region: ${{ env.AWS_REGION }}\n      \n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@v3\n        with:\n          terraform_version: ${{ env.TF_VERSION }}\n      \n      - name: Terraform Init\n        working-directory: infra/terraform\n        run: |\n          terraform init \\\n            -backend-config=\"bucket=${{ secrets.TF_STATE_BUCKET }}\" \\\n            -backend-config=\"key=staging/terraform.tfstate\" \\\n            -backend-config=\"region=${{ env.AWS_REGION }}\" \\\n            -backend-config=\"dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}\"\n      \n      - name: Terraform Apply\n        working-directory: infra/terraform\n        run: terraform apply -auto-approve tfplan\n"
      }
    ]
  },
  "ops": {
    "env_vars": {
      "orders": {
        "ORDERS_TABLE": "DynamoDB table name for orders",
        "EVENT_BUS_NAME": "EventBridge bus name for emitting events"
      },
      "inventory": {
        "INVENTORY_TABLE": "DynamoDB table name for inventory and idempotency markers",
        "EVENT_BUS_NAME": "EventBridge bus name for emitting events"
      },
      "receipts": {
        "EVENT_BUS_NAME": "EventBridge bus name (read-only for context)"
      },
      "ingestor": {
        "EVENT_BUS_NAME": "EventBridge bus name for emitting customer upserted events"
      },
      "health": {
        "BUILD_SHA": "Git commit SHA for deployment tracking"
      }
    },
    "iam_policies": [
      {
        "name": "orders-ddb-access",
        "policy_json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:PutItem\",\n        \"dynamodb:GetItem\"\n      ],\n      \"Resource\": \"arn:aws:dynamodb:REGION:ACCOUNT:table/PROJECT-ENV-orders\"\n    }\n  ]\n}"
      },
      {
        "name": "orders-eventbridge-access",
        "policy_json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"events:PutEvents\",\n      \"Resource\": \"arn:aws:events:REGION:ACCOUNT:event-bus/PROJECT-ENV-bus\"\n    }\n  ]\n}"
      },
      {
        "name": "inventory-ddb-access",
        "policy_json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:PutItem\",\n        \"dynamodb:UpdateItem\"\n      ],\n      \"Resource\": \"arn:aws:dynamodb:REGION:ACCOUNT:table/PROJECT-ENV-inventory\"\n    }\n  ]\n}"
      },
      {
        "name": "inventory-eventbridge-access",
        "policy_json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"events:PutEvents\",\n      \"Resource\": \"arn:aws:events:REGION:ACCOUNT:event-bus/PROJECT-ENV-bus\"\n    }\n  ]\n}"
      },
      {
        "name": "ingestor-s3-access",
        "policy_json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::PROJECT-ENV-crm-ingestion/*\"\n    }\n  ]\n}"
      },
      {
        "name": "ingestor-eventbridge-access",
        "policy_json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"events:PutEvents\",\n      \"Resource\": \"arn:aws:events:REGION:ACCOUNT:event-bus/PROJECT-ENV-bus\"\n    }\n  ]\n}"
      }
    ],
    "alarms": [
      {
        "name": "CreateOrderErrorsHigh",
        "description": "Alarm when create_order Lambda function errors exceed 5 in 1 minute"
      },
      {
        "name": "GetOrderErrorsHigh",
        "description": "Alarm when get_order Lambda function errors exceed 5 in 1 minute"
      },
      {
        "name": "InventoryReserveErrorsHigh",
        "description": "Alarm when inventory_reserve Lambda function errors exceed 5 in 1 minute"
      },
      {
        "name": "ReceiptsWorkerErrorsHigh",
        "description": "Alarm when receipts_worker Lambda function errors exceed 5 in 1 minute"
      },
      {
        "name": "CRMIn